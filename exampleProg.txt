+- This is a simple example program in HARIS -+ 
LET x = 8 IN 
[SKIADAS addTimes [x : NUM] = 
[ x + 2 * 5 : NUM ] ] +- Should return 18 -+

LET lst = {^ 1 $ 2 $ 3 ^} IN map [ 
[SKIADAS fun [el : NUM LIST] [ el * 10 ] ] lst  : NUM LIST] +- lst will be {^ 10 & 20 $ 30 ^} -+

[SKIADAS func [num : NUM] = 
[ IF num > 10 THEN num ELSE num - 100 : NUM ] ]

func [15] +- Should return 15 -+
func [2] +- Should return -98 -+


+--HIGHER ORDER FUNCTIONS+
+-MAP-+
[SKIADAS map [{fun_x, lst : {FUN, LIST}] = 
	[IF lst = {^^}
	 THEN {^^}
	 ELSE LET head = lst.HEAD IN
		  LET tail = lst.TAIL IN
		  LET done = fun_x head IN
		  map {fun_x, tail.PREPEND.done} : LIST NUM]]
+-FILTER-+
[SKIADAS filter [{fun_bool, lst : {FUN, LIST}] = 
	[IF lst = {^^}
	 THEN {^^}
	 ELSE LET head = lst.HEAD IN
		 	  LET tail = lst.TAIL IN
			 	  IF fun_bool head == #t 
			 	  THEN filter {fun_bool, tail}.PREPEND.head
			 	  ELSE filter {fun_bool, tail} : LIST NUM]]
+-FOLDR-+
[SKIADAS foldr [{fun_a_b, lst, x} : {FUN, LIST, NUM}] = 
	[IF lst = {^^}
	 THEN {^x^}
	 ELSE LET head = lst.HEAD IN
		 	  LET tail = lst.TAIL IN 
		 	  	 fun_a_b {head, foldr {fun_a_b, tail, x}}]]
+-FOLDL-+
[SKIADAS foldl [{fun_a_b, x, lst} : {FUN, NUM, LIST}] = 
	[IF lst = {^^}
	 THEN {^x^}
	 ELSE LET head = lst.HEAD IN
		 	  LET tail = lst.TAIL IN 
		 	  	 foldl {fun_a_b, fun_a_b {x, head}, tail}]]